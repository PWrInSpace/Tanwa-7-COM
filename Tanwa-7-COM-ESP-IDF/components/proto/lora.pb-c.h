/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: lora.proto */

#ifndef PROTOBUF_C_lora_2eproto__INCLUDED
#define PROTOBUF_C_lora_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct LoRaFrame LoRaFrame;
typedef struct LoRaCommand LoRaCommand;
typedef struct LoRaSettings LoRaSettings;


/* --- enums --- */


/* --- messages --- */

struct  LoRaFrame
{
  ProtobufCMessage base;
  /*
   *TANWA COM
   */
  uint32_t tanwa_state;
  uint32_t uptime;
  int32_t engine_work_time;
  float pressure_fuel;
  float pressure_after_fill;
  float pressure_before_fill;
  float pressure_oxy;
  float pressure_injector_fuel;
  float pressure_injector_oxi;
  float pressure_combustion_chamber;
  protobuf_c_boolean status_fill;
  protobuf_c_boolean status_depr;
  protobuf_c_boolean status_vent;
  protobuf_c_boolean status_arm;
  protobuf_c_boolean igniter_cont1;
  protobuf_c_boolean igniter_cont2;
  float tanwa_battery;
  /*
   *TANWA HX
   */
  float engine_thrust;
  float rocket_weight;
  float tank_weight;
  float temp_injector;
  float temp_combustion_chamber;
  float temp_external_tank;
  protobuf_c_boolean ststus_oxy;
  protobuf_c_boolean status_fuel;
};
#define LO_RA_FRAME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&lo_ra_frame__descriptor) \
    , 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }


struct  LoRaCommand
{
  ProtobufCMessage base;
  /*
   *Command frame
   */
  uint32_t lora_dev_id;
  uint32_t sys_dev_id;
  uint32_t command;
  int32_t payload;
};
#define LO_RA_COMMAND__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&lo_ra_command__descriptor) \
    , 0, 0, 0, 0 }


struct  LoRaSettings
{
  ProtobufCMessage base;
  /*
   * Settings frame
   */
  int32_t lora_freq_khz;
  int32_t lora_transmit_ms;
  int32_t countdown_time;
  int32_t ingition_time;
  uint32_t flash_enable;
  uint32_t buzzer_enable;
};
#define LO_RA_SETTINGS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&lo_ra_settings__descriptor) \
    , 0, 0, 0, 0, 0, 0 }


/* LoRaFrame methods */
void   lo_ra_frame__init
                     (LoRaFrame         *message);
size_t lo_ra_frame__get_packed_size
                     (const LoRaFrame   *message);
size_t lo_ra_frame__pack
                     (const LoRaFrame   *message,
                      uint8_t             *out);
size_t lo_ra_frame__pack_to_buffer
                     (const LoRaFrame   *message,
                      ProtobufCBuffer     *buffer);
LoRaFrame *
       lo_ra_frame__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   lo_ra_frame__free_unpacked
                     (LoRaFrame *message,
                      ProtobufCAllocator *allocator);
/* LoRaCommand methods */
void   lo_ra_command__init
                     (LoRaCommand         *message);
size_t lo_ra_command__get_packed_size
                     (const LoRaCommand   *message);
size_t lo_ra_command__pack
                     (const LoRaCommand   *message,
                      uint8_t             *out);
size_t lo_ra_command__pack_to_buffer
                     (const LoRaCommand   *message,
                      ProtobufCBuffer     *buffer);
LoRaCommand *
       lo_ra_command__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   lo_ra_command__free_unpacked
                     (LoRaCommand *message,
                      ProtobufCAllocator *allocator);
/* LoRaSettings methods */
void   lo_ra_settings__init
                     (LoRaSettings         *message);
size_t lo_ra_settings__get_packed_size
                     (const LoRaSettings   *message);
size_t lo_ra_settings__pack
                     (const LoRaSettings   *message,
                      uint8_t             *out);
size_t lo_ra_settings__pack_to_buffer
                     (const LoRaSettings   *message,
                      ProtobufCBuffer     *buffer);
LoRaSettings *
       lo_ra_settings__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   lo_ra_settings__free_unpacked
                     (LoRaSettings *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*LoRaFrame_Closure)
                 (const LoRaFrame *message,
                  void *closure_data);
typedef void (*LoRaCommand_Closure)
                 (const LoRaCommand *message,
                  void *closure_data);
typedef void (*LoRaSettings_Closure)
                 (const LoRaSettings *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor lo_ra_frame__descriptor;
extern const ProtobufCMessageDescriptor lo_ra_command__descriptor;
extern const ProtobufCMessageDescriptor lo_ra_settings__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_lora_2eproto__INCLUDED */
